Array Based Programs
-------------------------
1.Calculate the average of given array. 


import java.util.Scanner;
public class AverageExample {

    public static void main(String[] args) {
        System.out.println("How many numbers you want to enter?");
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        
        double[] arr = new double[n];
        double total = 0;

        for(int i=0; i<arr.length; i++){
        	System.out.print("Enter Element No."+(i+1)+": ");
        	arr[i] = scanner.nextDouble();
        }
        scanner.close();
        for(int i=0; i<arr.length; i++){
        	total = total + arr[i];
        }


        
        double average = total / arr.length;
        
        System.out.format("The average is: %.3f", average);
    }
}


2.Find the second largest number in the given array. 

public class SecondLargestInArray{  
public static int getSecondLargest(int[] a, int total){  
int temp;  
for (int i = 0; i < total; i++)   
        {  
            for (int j = i + 1; j < total; j++)   
            {  
                if (a[i] > a[j])   
                {  
                    temp = a[i];  
                    a[i] = a[j];  
                    a[j] = temp;  
                }  
            }  
        }  
       return a[total-2];  
}  
public static void main(String args[]){  
int a[]={1,2,5,6,3,2};  
int b[]={44,66,99,77,33,22,55};  
System.out.println("Second Largest: "+getSecondLargest(a,6));  
System.out.println("Second Largest: "+getSecondLargest(b,7));  
}}


3.Find the second minimum number in the given array. 

public class SecondSmallestInArray{  
public static int getSecondSmallest(int[] a, int total){  
int temp;  
for (int i = 0; i < total; i++)   
        {  
            for (int j = i + 1; j < total; j++)   
            {  
                if (a[i] > a[j])   
                {  
                    temp = a[i];  
                    a[i] = a[j];  
                    a[j] = temp;  
                }  
            }  
        }  
       return a[1];
}  
public static void main(String args[]){ 
 
int a[]={1,2,5,6,3,2};  
int b[]={44,66,99,77,33,22,55};  
System.out.println("Second smallest: "+getSecondSmallest(a,6));  
System.out.println("Second smallest: "+getSecondSmallest(b,7));  
}}
4.Find the missing Number in the given array of 1 to N.

import java.util.Scanner;
public class MissingNumber {
   public static void main(String[] args) {
      Scanner sc = new Scanner(System.in);
      System.out.println("Enter the n value: ");
      int n = sc.nextInt();
      int inpuArray[] = new int[n];
      System.out.println("Enter (n-1) numbers: ");
      for(int i=0; i<=n-2; i++) {
         inpuArray[i] = sc.nextInt();
      }
      //Finding the missing number
      int sumOfAll = (n*(n+1))/2;
      int sumOfArray = 0;
      for(int i=0; i<=n-2; i++) {
         sumOfArray = sumOfArray+inpuArray[i];
      }
      int missingNumber = sumOfAll-sumOfArray;
      System.out.println("Missing number is: "+missingNumber);
   }
} 
5.Write a Java Program to find the Intersection of two arrays. 

public class IntersectionOfTwoArrays {
   public static void main(String args[]) {
      int myArray1[] = {23, 36, 96, 78, 55};
      int myArray2[] = {78, 45, 19, 73, 55};
      System.out.println("Intersection of the two arrays ::");
     
      for(int i = 0; i<myArray1.length; i++ ) {
         for(int j = 0; j<myArray2.length; j++) {
            if(myArray1[i]==myArray2[j]) {
               System.out.println(myArray2[j]);
            }
         }
      }
   }
}
6.Write a Java Program to find the Intersection of Two Sorted arrays. 


7.Write a Java Program to find the Union of Two Arrays (UnSorted Array).

public class Union {

    public static void main(String[] args) {
        int[] firstArr = {1, 2, 3, 4, 5, 6};
        int[] secondArr = {4, 9, 13, 15, 16, 17};

        findUnion(firstArr, secondArr);
    }

    private static void findUnion(int[] firstArr, int[] secondArr) {
        int i = 0;
        int j = 0;

        while (i < firstArr.length && j < secondArr.length) {
            if (firstArr[i] < secondArr[j]) {
                System.out.print(firstArr[i] + " ");
                i++;
            } else if (secondArr[j] < firstArr[i]) {
                System.out.print(secondArr[j] + " ");
                j++;
            } else {
                System.out.print(firstArr[i] + " ");
                i++;
                j++;
            }
        }

        while (i < firstArr.length) {
            System.out.print(firstArr[i] + " ");
            i++;
        }

        while (j < secondArr.length) {
            System.out.print(secondArr[j] + " ");
            j++;
        }
    }

}




8.Write a Java Program to find the Union of Two Arrays (Sorted Arrays). 

public class Main {

    public static void main(String[] args) {
        int[] firstArr = {1, 2, 3, 4, 5, 6};
        int[] secondArr = {4, 9, 13, 15, 16, 17};

        findUnion(firstArr, secondArr);
    }

    private static void findUnion(int[] firstArr, int[] secondArr) {
        int i = 0;
        int j = 0;

        while (i < firstArr.length && j < secondArr.length) {
            if (firstArr[i] < secondArr[j]) {
                System.out.print(firstArr[i] + " ");
                i++;
            } else if (secondArr[j] < firstArr[i]) {
                System.out.print(secondArr[j] + " ");
                j++;
            } else {
                System.out.print(firstArr[i] + " ");
                i++;
                j++;
            }
        }

        while (i < firstArr.length) {
            System.out.print(firstArr[i] + " ");
            i++;
        }

        while (j < secondArr.length) {
            System.out.print(secondArr[j] + " ");
            j++;
        }
    }

} 




9.Write a Java Program to find the Union of Tow Arrays using HashSet. 


class FindUnion {
  
    static int printUnion(int arr1[], int arr2[], int m, int n)
    {
        int i = 0, j = 0;
        while (i < m && j < n) {
            if (arr1[i] < arr2[j])
                System.out.print(arr1[i++] + " ");
            else if (arr2[j] < arr1[i])
                System.out.print(arr2[j++] + " ");
            else {
                System.out.print(arr2[j++] + " ");
                i++;
            }
        }
 
     
        while (i < m)
            System.out.print(arr1[i++] + " ");
        while (j < n)
            System.out.print(arr2[j++] + " ");
 
        return 0;
    }
 
    public static void main(String args[])
    {
        int arr1[] = { 1, 2, 4, 5, 6 };
        int arr2[] = { 2, 3, 5, 7 };
        int m = arr1.length;
        int n = arr2.length;
        printUnion(arr1, arr2, m, n);
    }
}



10.Write a Java Program to Move all Zero to End of the Array. 


import java.util.Arrays;
import java.util.HashSet;
 
public class Main 
{
  public static void main(String[] args) 
  {
    Integer[] firstArray = {0,2,4,6,8};
      Integer[] secondArray = {1,3,5,7,9};
       
      HashSet<Integer> set = new HashSet<>(); 
       
      set.addAll(Arrays.asList(firstArray));
       
      set.addAll(Arrays.asList(secondArray));
       
      System.out.println(set);
     
    //convert to array
      Integer[] union = {};
    union = set.toArray(union);
     
    System.out.println(Arrays.toString(union));
  }
}





11.Write a Java Program to Move all Zeros to Start of the Array. 




import java.io.*;
 
class PushZero
{
    
    static void pushZerosToEnd(int arr[], int n)
    {
        int count = 0;  // Count of non-zero elements
 
       
        for (int i = 0; i < n; i++)
            if (arr[i] != 0)
                arr[count++] = arr[i]; 
                                      
      
        while (count < n)
            arr[count++] = 0;
    }
 
    
    public static void main (String[] args)
    {
        int arr[] = {1, 9, 8, 4, 0, 0, 2, 7, 0, 6, 0, 9};
        int n = arr.length;
        pushZerosToEnd(arr, n);
        System.out.println("Array after pushing zeros to the back: ");
        for (int i=0; i<n; i++)
            System.out.print(arr[i]+" ");
    }
}

12.Write a Java Program to Reverse the given array without using additional Array. 

class AddArray {
    public static void main(String args[]) {
      
        int[] array = {1, 2, 0, 4, 6, 0, 9, 0, 4, 0, 3, 0, 9, 0, 1, 0, 3, 0};

        
        int current = array.length - 1;
        for (int i = array.length - 1; i >= 0; i--) {
            if (array[i] != 0) {
                array[current] = array[i];
                current--;
            }
        }

        
        while (current >= 0) {
            array[current] = 0;
            current--;
        }

        for (int i = 0; i < array.length; i++) {
            System.out.print(array[i] + " ");
        }
    }
}





13.Write a program to find the Most Frequent Element in an given array. 

import java.util.Arrays;

public class ArrayReverse {

    public int[] reverse(int [] array){

        if(array == null || array.length <= 1){
            System.out.println("Invalid array.");
        }
        for (int i = 0; i < array.length / 2; i++) {
            int temp = array[i];
            array[i] = array[array.length - 1 - i];
            array[array.length - 1 - i] = temp;
        }
        return array;
    }

    public static void main(String[] args){
        ArrayReverse arrayReverse = new ArrayReverse();
        int[] input = {1, 2, 3, 4, 5, 6, 7, 8};
        System.out.println("Original array" + Arrays.toString(input));
        System.out.println("Reversed array" + Arrays.toString(arrayReverse.reverse(input)));
    }
}
14.Write a program to find the Most Frequent Element using Sorting. 

class Sort {
     
    static int mostFrequent(int arr[], int n)
    {
     
        Arrays.sort(arr);
         
        
        int max_count = 1, res = arr[0];
        int curr_count = 1;
         
        for (int i = 1; i < n; i++)
        {
            if (arr[i] == arr[i - 1])
                curr_count++;
            else
            {
                if (curr_count > max_count)
                {
                    max_count = curr_count;
                    res = arr[i - 1];
                }
                curr_count = 1;
            }
 }
     
       
        if (curr_count > max_count)
        {
            max_count = curr_count;
            res = arr[n - 1];
        }
     
        return res;
    }
     
    
    public static void main (String[] args) {
         
        int arr[] = {1, 5, 2, 1, 3, 2, 1};
        int n = arr.length;
         
        System.out.println(mostFrequent(arr,n));
         
    }
}




15.Write a program to find the Most Frequent Element using HashTable. 
import java.util.*;
 
class SortHash {
     
    static int mostFrequent(int arr[], int n)
    {
         
       
        Arrays.sort(arr);
         
       
        int max_count = 1, res = arr[0];
        int curr_count = 1;
 for (int i = 1; i < n; i++)
        {
            if (arr[i] == arr[i - 1])
                curr_count++;
            else
            {
                if (curr_count > max_count)
                {
                    max_count = curr_count;
                    res = arr[i - 1];
                }
                curr_count = 1;
            }
        }
     
        if (curr_count > max_count)
        {
            max_count = curr_count;
            res = arr[n - 1];
        }
     
        return res;
    }
 public static void main (String[] args) {
         
        int arr[] = {1, 5, 2, 1, 3, 2, 1};
        int n = arr.length;
         
        System.out.println(mostFrequent(arr,n));
         
    }
}

16.Write a java program to Rotate the Given Array d times. 

class Rotate {    
 public static void main(String[] args) {    
          
        int [] arr = new int [] {1, 2, 3, 4, 5};     
        
        int n = 3;    
      
        System.out.println("Original array: ");    
        for (int i = 0; i < arr.length; i++) {     
            System.out.print(arr[i] + " ");     
        }      
      
        for(int i = 0; i < n; i++){    
            int j, last;    
          
            last = arr[arr.length-1];    
            
            for(j = arr.length-1; j > 0; j--){    
                
                arr[j] = arr[j-1];    
            }    
             
            arr[0] = last;    
        }    
        
        System.out.println();    
            
        
        System.out.println("Array after right rotation: ");    
        for(int i = 0; i< arr.length; i++){    
            System.out.print(arr[i] + " ");    
        }    
    }    
}    
17.Find the pair of elements(X+Y) in the array whose sum is equal to given number Z. 

class AssExmp{
 
  // Function to find and print pair
  static boolean chkPair(int A[], int size, int x) {
      for (int i = 0; i < (size - 1); i++) {
          for (int j = (i + 1); j < size; j++) {
              if (A[i] + A[j] == x) {
                  System.out.println("Pair with a given sum " + x +
                                     " is (" + A[i] + ", " + A[j] + ")");
   
 
                  return true;
              }
          }
      }
 
      return false;
  }
 
  public static void main(String [] args) {
     
      int A[] = {0, -1, 2, -3, 1};
      int x = -2;
int size = A.length;
 
      if (chkPair(A, size, x)) {
          System.out.println("Valid pair exists");
      }
      else {
          System.out.println("No valid pair exists for " + x );
      }
  }
}
18.Write a java program to check Given String is Palindrome or NOT. 

class PalindromeExample{  
 public static void main(String args[]){  
  int r,sum=0,temp;    
  int n=454;
  
  temp=n;    
  while(n>0){    
   r=n%10; 
   sum=(sum*10)+r;    
   n=n/10;    
  }    
  if(temp==sum)    
   System.out.println("palindrome number ");    
  else    
   System.out.println("not palindrome");    
}  
}  
19.How to Swap two Strings without using third (temporary) variable? 

public class SwapStrings     
{    
    public static void main(String[] args) {    
        String str1 = "Good ", str2 = "morning ";    
         System.out.println("Strings before swapping: " + str1 + " " + str2);    
           
        str1 = str1 + str2;    
          
        str2 = str1.substring(0, (str1.length() - str2.length()));    
       
        str1 = str1.substring(str2.length());    
            
        System.out.println("Strings after swapping: " + str1 + " " + str2);    
    }    
}  

20.Write a java program to Reverse a String without using in-build function.

public class ReverseString {

 public static void main(String[] args) {

  String str = "Hello world";
  String revString = "";

  for (int i = str.length() - 1; i >= 0; --i) {
   revString += str.charAt(i);
  }

  System.out.println(revString);
 }
}